# DaHelpers Changelog

## 0.3.0

### Added guard function to `extend()`

The guard function can be used to specify a condition under which the extend
will copy a property.

### Added `mixin()` function

The `mixin()` is similar to `extend()` but does not overwrite existing
properties.

### Added `create()` function

This is a Crockford-style prototypal inheritance function with support for
mixins. It also adds a `__super__` property which points to the prototype.

### Added `objIter()`, `arrayIter()`, and `iter()` functions

These function return handy iterator object for manipulating arrays and objects
as sequences.

### Added `compose()` function

Allows function composition.

### Added `lazy()` function

Allows creation of lazy-evaluating functions (sort of).

### Added `suicidal()` function

Allows creation of functions that commit suicide after first call.

## 0.2.11

### Fixed bug in `subset()` function

The subset would always return the test performed on last key rather than all
keys. This is now fixed and subset works as expected.

## 0.2.10

### Added `#every()`, `#none()` and `#any()` functions

Tests if an array contains only truthy values, no truthy values, and at least
one truthy value, respectively.

## 0.2.9

### Added `subset()` function

This function tests whether some object is a subset of another

### The `props()` now takes array just like `#propset()`

Because of the behavior required for `subset()`, the `props()` has been
modified to use arrays as second argument in conjunction with strings.

## 0.2.8

### `#objAttrs()` fix

The method now accepts `''`, `undefined`, and `null` as valid arguments and
generates an attribute with no value.

### Added `button` and `option` tag aliases

Yup.

## 0.2.7

### `#walk()`, `#propset()`, and `#extend()` fixes

The `#walk()` now passes, and `#propset()` takes keys broken down into array of
components. This is now used by `#extend()` and, by... err... extension, the
`#clone()` method to provide more robust cloning of keys that contain a period.

## 0.2.6

### `#pad()` will remove the tail if it's 0

This handles the case where we want to 'round' the number. This is not
mathematical rounding, since tail is simply removed.

## 0.2.5

### Fixed `#extend()` not being decoulpled from module

The `#extend()` was calling the `#walk()` method using reference to `this`.
This was fixed (no pun intended).

## 0.2.4

### Added `#truth()` method

Gives a better truthy and falsy.

### Added `#type()` method

This method is a replacement for `typeOf` function. It is able to correctly
tell the difference between array, object, date, regexp, and null.

### Added `#klass()` method

This method helps test and retrieve objects' constructors.

## Use `#type()` and `#klass()` everywhere

The old type-checking methods have been replaced by `#type()` and `#klass()`
calls. It seems these methods have proven their usefulness already. :)

## 0.2.3

### Fixed `#thousands()` breaking on undefined or null

The method will now gracefully return empty string if passed undefined or null.

### Added `#toArray()` method

This method it used to convert any non-array value into an array (forcing
array).

## 0.2.2

### Added `#escape()` method

This method escapes special HTML characters.

## 0.2.0

### Added `#extend()` method

The new jQuery-style `#extend()` method deep-copies properties from one or more
mixins to an object.

The `#clone()` method now uses `#extend()` under the hood and some of the
clone's logic has been moved to `#extend()`.

### `#propset()` now overwrites existing properties

As the heading says, propset now properly overwrites existing properties. If
you have depended on the previous wrong behavior, please fix your code before
updating to 0.2.0.

## 0.1.0

### Fixed aliasing code

The tag aliasing was broken after 0.0.2 refactor. This is now fixed.

### Added `#clone()` and `#rekey()` methods

These methods allow developers to clone objects or remap their property 
structure.

### Added `#walk()` and `#sweep()` methods

These methods allow developers to iterate object properties in various ways and
perform operations on them.

### Added `#props()` and `#propset()` methods

The `#props()` helper is used for retrieving deeply nested object properties
without the need for checking whether individual segments of the property tree
are defined.

The `#propset()` helper allows us to set deeply nested object properties at
once without having to manually create the intermediate structure.

### Refactored `#pad()` method

The `#pad()` method has been refactored to not depend on the same-named
variable in the outer scope for recursion.

## 0.0.2

Minor improvements to documentation and small refactor of tag aliases code.
