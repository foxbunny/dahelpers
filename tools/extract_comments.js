// Generated by CoffeeScript 1.6.3
var commentRe, contents, dahelpers, filename, lines, mkd, paragraphs, readFileSync, toc, writeFileSync, _ref;

_ref = require('fs'), readFileSync = _ref.readFileSync, writeFileSync = _ref.writeFileSync;

dahelpers = require('../dahelpers');

commentRe = /^ *(?:#|# (.*))$/;

filename = process.argv[2];

contents = readFileSync(filename, {
  encoding: 'utf-8'
});

lines = contents.split('\n');

paragraphs = [];

(function(block) {
  return lines.forEach(function(line, idx) {
    var match;
    match = line.match(commentRe);
    if (match) {
      if (match[1] != null) {
        block.push(match[1]);
      } else {
        paragraphs.push(block);
        block = [];
      }
    }
  });
})([]);

paragraphs = paragraphs.map(function(paragraph) {
  if (paragraph[0][0] === ' ') {
    return paragraph.join('\n') + '\n';
  } else {
    return dahelpers.wrap(paragraph.join(' '));
  }
});

toc = '';

paragraphs = paragraphs.map(function(paragraph) {
  var hash, m, title, tocIndent, tocLevel, tocSymbol;
  if (paragraph[0] === '#') {
    m = paragraph.match(/^(#+) (.*)$/);
    tocLevel = m[1].length;
    title = m[2];
    tocSymbol = tocLevel % 2 ? '-' : '+';
    tocIndent = new Array(2 + ((tocLevel - 2) * 2)).join(' ');
    hash = dahelpers.slug(paragraph);
    if (tocLevel > 1) {
      toc += tocIndent + tocSymbol + ' [' + title + '](#' + hash + ')\n';
    }
    return paragraph + ' ' + dahelpers.a('', {
      name: hash
    });
  } else {
    return paragraph;
  }
});

mkd = paragraphs.join('\n\n');

mkd = mkd.replace('::TOC::', toc);

console.log(mkd);
