// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var define,
  __slice = [].slice;

define = (function(root) {
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    if (typeof module === 'object' && module.exports) {
      return function(factory) {
        return module.exports = factory();
      };
    } else {
      return function(factory) {
        return root.dahelpers = factory();
      };
    }
  }
})(this);

define(function() {
  var h, tag, tags, _i, _len;
  h = {
    FIRST_CHAR: /\b([a-z])/gi,
    objAttrs: function(o) {
      var attrs, key;
      attrs = [];
      for (key in o) {
        if (o[key]) {
          attrs.push("" + key + "=\"" + (o[key].replace(/"/g, '\\"')) + "\"");
        }
      }
      return attrs.join(' ');
    },
    tag: function(name, content, attrs, silence) {
      var s;
      if (content == null) {
        content = '';
      }
      if (attrs == null) {
        attrs = null;
      }
      if (silence == null) {
        silence = false;
      }
      if (!name) {
        return '';
      }
      if (silence && ((content == null) || content.toString() === '')) {
        return '';
      }
      s = "<" + name;
      if (attrs) {
        s += " " + (h.objAttrs(attrs));
      }
      s += ">" + content + "</" + name + ">";
      return s;
    },
    plural: function(singular, plural, count) {
      if (!singular) {
        return '';
      }
      if (count == null) {
        count = plural;
        plural = singular + 's';
      }
      if (count === 1) {
        return singular;
      } else {
        return plural;
      }
    },
    capitalize: function(s) {
      if (!s) {
        return '';
      }
      return "" + (s[0].toUpperCase()) + s.slice(1);
    },
    titleCase: function(s) {
      if (!s) {
        return '';
      }
      return s.replace(h.FIRST_CHAR, function() {
        var groups, match;
        match = arguments[0], groups = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return groups[0].toUpperCase();
      });
    },
    format: function(s, format) {
      var chr, _i, _len;
      if (!s) {
        return '';
      }
      s = '' + s;
      if (!format) {
        return s;
      }
      s = s.split('');
      for (_i = 0, _len = s.length; _i < _len; _i++) {
        chr = s[_i];
        format = format.replace('#', chr);
      }
      return format;
    },
    reverse: function(s) {
      if (s) {
        return s.split('').reverse().join('');
      } else {
        return '';
      }
    },
    sgroup: function(s, n) {
      var m;
      if (s == null) {
        return [];
      }
      s = s.toString();
      if (!n) {
        return [s];
      }
      m = s.match(new RegExp("(.{1," + n + "})", 'g'));
      return m;
    },
    thousands: function(num, separator, decimalSeparator) {
      var frac, _ref;
      if (separator == null) {
        separator = ',';
      }
      if (decimalSeparator == null) {
        decimalSeparator = '.';
      }
      num = num.toString();
      num = num.replace(/[^\d\.]/g, '');
      _ref = num.toString().split('.'), num = _ref[0], frac = _ref[1];
      num = h.reverse(num);
      num = h.sgroup(num, 3).join(separator);
      num = h.reverse(num);
      if (frac) {
        num = "" + num + decimalSeparator + frac;
      }
      return num;
    },
    si: function(num, d) {
      var adjustment, factor, idx, unit, units, _i, _len;
      if (d == null) {
        d = 0;
      }
      if (num == null) {
        return '';
      }
      units = 'kMGTPEZ'.split('');
      units.unshift('');
      adjustment = Math.pow(10, d);
      num = num * adjustment;
      factor = 0;
      for (idx = _i = 0, _len = units.length; _i < _len; idx = ++_i) {
        unit = units[idx];
        if (num % 1000) {
          return "" + (num / adjustment) + unit;
        } else {
          num = num / 1000;
        }
      }
    },
    digits: function(s) {
      if (s == null) {
        return '';
      }
      return s.toString().replace(/[^\d]/g, '');
    }
  };
  tags = 'a p strong em ul ol li div span'.split(' ');
  for (_i = 0, _len = tags.length; _i < _len; _i++) {
    tag = tags[_i];
    h[tag] = (function(tag) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        args.unshift(tag);
        return h.tag.apply(h, args);
      };
    })(tag);
  }
  return h;
});
